networks:
  quest-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  jaeger_data:
  prometheus_data:
  grafana_data:

services:
  # API Gateway
  api-gateway:
    build:
      context: .  # This must be the root directory containing 'common' and 'services'
      dockerfile: services/api-gateway/Dockerfile
    container_name: quest-api-gateway
    hostname: api-gateway-${HOSTNAME:-container}
    ports:
      - "8000:8000"
    environment:
      - HOSTNAME=api-gateway-${HOSTNAME:-container}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - RABBITMQ_CALLBACK_QUEUE=api-gateway_callback_${HOSTNAME:-container}
      - API_GATEWAY_SERVICE_NAME=api-gateway
      - USER_SERVICE_URL=http://user-service:8001
      - QUEST_SERVICE_URL=http://quest-service:8002
      - NOTE_SERVICE_URL=http://note-service:8003
      - VOICE_SERVICE_URL=http://voice-service:8004
      - SUBSCRIPTION_SERVICE_URL=http://subscription-service:8005
      - INTEGRATION_SERVICE_URL=http://integration-service:8006
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispassword}
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=14268
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      - rabbitmq
      - redis
      - user-service
      - jaeger
    networks:
      - quest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: .  # This must be the root directory containing 'common' and 'services'
      dockerfile: services/user-service/Dockerfile
    container_name: quest-user-service
    hostname: user-service-${HOSTNAME:-container}
    environment:
      - HOSTNAME=user-service-${HOSTNAME:-container}
      - SERVICE_NAME=user-service
      - HOST=0.0.0.0
      - PORT=8001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DB_NAME=${POSTGRES_USER_DB:-user_service}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - RABBITMQ_CALLBACK_QUEUE=user-service_callback_${HOSTNAME:-container}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispassword}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=14268
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - jaeger
    networks:
      - quest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quest-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_USER_DB:-user_service},${POSTGRES_QUEST_DB:-quest_service},${POSTGRES_NOTE_DB:-note_service},${POSTGRES_INTEGRATION_DB:-integration_service},${POSTGRES_SUBSCRIPTION_DB:-subscription_service}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - quest-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quest-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - quest-network
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD:-redispassword}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispassword}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: quest-rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./scripts:/scripts
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/advanced.config:/etc/rabbitmq/advanced.config:ro
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - quest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ElasticSearch (for search capabilities)
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: quest-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - quest-network
    restart: unless-stopped
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: quest-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - quest-network
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles

  # Grafana (visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: quest-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 256M
    depends_on:
      - prometheus
    networks:
      - quest-network
    restart: unless-stopped

  # Jaeger (distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quest-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Web UI
      - "14268:14268"  # Collector HTTP
      - "14250:14250"  # Collector gRPC
      - "9411:9411"    # Zipkin compatible endpoint
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - quest-network
    restart: unless-stopped